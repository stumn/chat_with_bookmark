// dbOperations.js 
const { mongoose, User, Post, Memo } = require('./db');
const { handleErrors, organizeLogs } = require('./utils');

// „É¶„Éº„Ç∂„Éº„É¢„Éá„É´„Å´‰øùÂ≠ò
async function saveUser(name, socketId, randomString) {
    try {
        const userData = { name, socketId, randomString };
        const newUser = await User.create(userData);
        return newUser;
    } catch (error) {
        handleErrors(error, '„É¶„Éº„Ç∂„Éº‰øùÂ≠òÊôÇ„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

// „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
async function getUserInfo(name) {
    try {
        const userInfo = await User.findOne().where('name').equals(name);
        const randomString = userInfo.randomString;
        return randomString;
    } catch {
        handleErrors(error, '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæóÊôÇ„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

// const PAST_POST = 10 // ÈÅéÂéª„É≠„Ç∞ÂèñÂæóÊï∞

// „É≠„Ç∞„Ç§„É≥ÊôÇ„ÉªÈÅéÂéª„É≠„Ç∞„ÇíDB„Åã„ÇâÂèñÂæó
async function getPastLogs() {
    try {
        // const posts = await Post.find({}).limit(PAST_POST).sort({ createdAt: -1 });
        let posts = await Post.find({}).sort({ createdAt: -1 });
        let stacks = posts.filter(e => e.isStackingOn === true);

        posts = posts.filter(e => e.isStackingOn === false);
        posts.reverse();

        const pastLogs = await Promise.all(posts.map(organizeLogs));
        pastLogs.forEach(e => {
            e.createdAt = organizeCreatedAt(e.createdAt);
        });

        const stackLogs = await Promise.all(stacks.map(organizeLogs));
        stackLogs.forEach(e => {
            e.createdAt = organizeCreatedAt(e.createdAt);
        });
        console.log('ÈÅéÂéª„É≠„Ç∞Êï¥ÁêÜÂÆå‰∫Ü', pastLogs[pastLogs.length - 1]);
        return { pastLogs, stackLogs };
    } catch (error) {
        handleErrors(error, 'getPastLogs ÈÅéÂéª„É≠„Ç∞ÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

function organizeCreatedAt(createdAt) {
    const UTCdate = new Date(createdAt);
    const formattedCreatedAt = UTCdate.toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' });
    return formattedCreatedAt;
}

// „Éá„Éº„Çø„Éô„Éº„Çπ„Å´„É¨„Ç≥„Éº„Éâ„Çí‰øùÂ≠ò
async function saveRecord(name, msg, question = '', options = [], voteOptions = [], ups = [], downs = [], bookmarks = [], isOpenCard = false, isStackingOn = false, stackedPostIds = []) {
    try {
        const npData = { name, msg, question, options, voteOptions, ups, downs, bookmarks, isOpenCard, isStackingOn, stackedPostIds };
        console.log('npData: ', npData);
        const newPost = await Post.create(npData);
        return newPost;
    } catch (error) {
        handleErrors(error, '„Éá„Éº„Çø‰øùÂ≠òÊôÇ„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

// „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÂèóÈÄÅ‰ø°
async function SaveChatMessage(name, msg, isOpenCard) {
    try {
        console.log('SCM msg: ', msg);
        console.log('SCM isOpenCard: ', isOpenCard);
        const p = await saveRecord(name, msg, '', [], [], [], [], [], isOpenCard);
        console.log('„ÉÅ„É£„ÉÉ„Éà‰øùÂ≠ò„Åó„Åæ„Åó„Åüüí¨:' + p.msg + p.isOpenCard);
        return p;
    }
    catch (error) {
        handleErrors(error, '„ÉÅ„É£„ÉÉ„ÉàÂèóÈÄÅ‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

// Ëá™ÂàÜ„É°„É¢ÂèóÈÄÅ‰ø°
async function SavePersonalMemo(name, msg, socket) {
    try {
        const m = await saveMemo(name, msg);
        console.log('Ëá™ÂàÜ„É°„É¢‰øùÂ≠òÂÆå‰∫Ü', m.name, m.msg, m.createdAt);
        return m;
    }
    catch (error) {
        handleErrors(error, 'Ëá™ÂàÜ„É°„É¢ÂèóÈÄÅ‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

// Ëá™ÂàÜ„É°„É¢‰øùÂ≠ò
async function saveMemo(name, msg) {
    try {
        console.log(msg);
        const memoData = { name, msg };
        const newMemo = await Memo.create(memoData);
        console.log(newMemo);
        return newMemo;
    } catch (error) {
        handleErrors(error, 'Ëá™ÂàÜ„É°„É¢‰øùÂ≠òÊôÇ„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

// „Ç¢„É≥„Ç±„Éº„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÂèóÈÄÅ‰ø°
async function SaveSurveyMessage(formattedQuestion, options, name) {
    const voteOptions = options.map(() => []); // ÈÅ∏ÊäûËÇ¢Êï∞ÂàÜ„ÅÆÁ©∫ÈÖçÂàó„Çí‰ΩúÊàê
    console.log('voteOptions: ', voteOptions);
    try {
        const surveyPost = await saveRecord(name, '', formattedQuestion, options, voteOptions);
        console.log('surveyPost: ', surveyPost);
        return organizeLogs(surveyPost);
    } catch (error) {
        handleErrors(error, '„Ç¢„É≥„Ç±„Éº„ÉàÂèóÈÄÅ‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

// ÊäïÁ®ø„ÇíË¶ã„Å§„Åë„ÇãÈñ¢Êï∞
async function findPost(msgId) {
    try {
        const post = await Post.findById(msgId);
        if (!post) {
            throw new Error(`ÊäïÁ®ø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${msgId}`);
        }
        return post;
    } catch (error) {
        handleErrors(error, `ÊäïÁ®øË¶ã„Å§„Åã„Çâ„Å™„ÅÑ${msgId}`);
    }
}

async function findMemo(msgId) {
    try {
        const memo = await Memo.findById(msgId);
        if (!memo) {
            throw new Error(`„É°„É¢„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${msgId}`);
        }
        return memo;
    } catch (error) {
        handleErrors(error, `„É°„É¢Ë¶ã„Å§„Åã„Çâ„Å™„ÅÑ${msgId}`);
    }
}

async function getUserInfo_rsnm(randomString) {
    try {
        const userInfo = await User.findOne().where('randomString').equals(randomString);
        console.log('userInfo.name: ', userInfo.name);
        return userInfo.name;
    } catch {
        handleErrors(error, ' rs=>name „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæóÊôÇ„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

// „Éâ„Ç≠„É•„É°„É≥„Éà„Éö„Éº„Ç∏Áî® DB„Åã„Çâ„ÅÆÈÅéÂéª„É≠„Ç∞ÂèñÂæó„ÅÆÈñ¢Êï∞
async function fetchPosts(randomString, myName) {

    // „Åæ„Åö„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅÆDB„Åã„Çâ„ÄÅnameTomatch„ÇíÂèñÂæó
    const nameToMatch = await getUserInfo_rsnm(randomString);

    try {
        console.log('nameToMatch ÂÖ•„Å£„Å¶„ÅÑ„Çã„ÅãÂÜçÂ∫¶Á¢∫Ë™ç: ', nameToMatch);
        let posts = await Post.find(
            {
                'bookmarks': {
                    '$elemMatch': {
                        'name': nameToMatch
                    }
                }
            }
        ).sort({ createdAt: -1 });

        // bookmarks„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà
        if (posts.length === 0) {
            console.log('bookmarks„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
        }

        let messages = [];
        posts.forEach(e => {
            messages.push({ name: e.name, msg: e.msg, createdAt: e.createdAt });
        });

        // memo „ÇíÂèñÂæó
        const memos = await Memo.find({ name: nameToMatch });
        memos.forEach(e => {
            messages.push({ name: "personal memo", msg: e.msg, createdAt: e.createdAt });
        });

        // createdAt „Åß„ÇΩ„Éº„Éà
        messages.sort((a, b) => a.createdAt - b.createdAt);

        console.log('api ÈÅéÂéª„É≠„Ç∞ messaages: ', messages);
        return messages;
    }
    catch (error) {
        handleErrors(error, 'api ÈÅéÂéª„É≠„Ç∞ÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
}

async function saveStackRelation(dragedId, dropId) {
    try {
        // Find dragged post and handle errors
        const draggedPost = await findPost(dragedId);
        if (!draggedPost) throw new Error(`Post with ID ${dragedId} not found.`);
        console.log('draggedPost: ', draggedPost);

        // Update isStackingOn to true
        draggedPost.isStackingOn = true;
        await draggedPost.save();

        // Find drop post and handle errors
        const dropPost = await findPost(dropId);
        if (!dropPost) throw new Error(`Post with ID ${dropId} not found.`);
        console.log('dropPost: ', dropPost);

        // Add draggedId to stackedPostIds
        dropPost.stackedPostIds.push(dragedId);
        await dropPost.save();

        return { draggedPost, dropPost };

    } catch (error) {
        console.error('Error saving stack relation:', error);
        throw error;  // Re-throw the error to be handled by the caller
    }
}

async function kasaneteOpen_saveStackRelation(draggedPost, dropPost) {
    try {
        console.log('draggedPost: ', draggedPost);
        console.log('dropPost: ', dropPost);

        // Update isStackingOn to true
        draggedPost.isStackingOn = true;
        await draggedPost.save();

        // Add draggedId to stackedPostIds
        dropPost.stackedPostIds.push(draggedPost._id);
        await dropPost.save();

        // return { draggedPost, dropPost };

    } catch (error) {
        console.error('Error saving stack relation:', error);
        throw error;  // Re-throw the error to be handled by the caller
    }
}

module.exports = { saveUser, getUserInfo, getPastLogs, organizeCreatedAt, SaveChatMessage, SavePersonalMemo, SaveSurveyMessage, findPost, findMemo, fetchPosts, saveStackRelation, kasaneteOpen_saveStackRelation };
