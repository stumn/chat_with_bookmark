// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË™≠„ÅøËæº„Åø
require('dotenv').config();

// ÂøÖË¶Å„Å™„É¢„Ç∏„É•„Éº„É´„ÅÆ„Ç§„É≥„Éù„Éº„Éà
const express = require('express');
const app = express();
const routes = require('./routes');

app.use('/', routes);

const http = require('http');
const server = http.createServer(app);

const { Server } = require("socket.io");
const io = new Server(server);

const { mongoose, Post, Memo } = require('./db');
const {
  saveUser,
  getPastLogs,
  SaveChatMessage,
  SavePersonalMemo,
  SaveSurveyMessage
} = require('./dbOperations');

const {
  handleErrors,
  organizeCreatedAt,
  generateRandomString,
  processVoteEvent,
  receiveSendButtonEvent
} = require('./utils');

const { error } = require('console');

// ÂÆöÊï∞„ÅÆË®≠ÂÆö
const PORT = process.env.PORT || 3000;
const ANONYMOUS_NAME = 'ÂåøÂêç';

// „Ç™„É≥„É©„Ç§„É≥„É¶„Éº„Ç∂„Éº„ÅÆ„É™„Çπ„Éà
let onlineUsers = [];
let idsOnlineUsers = [];

// „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Åã„ÇâÊé•Á∂ö„Åå„ÅÇ„Å£„Åü„Å®„Åç„ÅÆ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©
io.on('connection', async (socket) => {

  // „É≠„Ç∞„Ç§„É≥ÊôÇ
  socket.on('sign-up', async (rawname) => {
    const { name, randomString } = await logInFunction(rawname, socket);
    socket.emit('randomString', randomString);

    // < „ÉÅ„É£„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ >
    socket.on('chat message', async (msg) => {
      const p = await SaveChatMessage(name, msg);

      const organizedPost = {
        _id: p._id,
        name: p.name,
        msg: p.msg,
        question: p.question,
        options: p.options,
        createdAt: organizeCreatedAt(p.createdAt)
      }

      io.emit('chatLogs', organizedPost);
    });

    // < Ëá™ÂàÜ„É°„É¢ >
    socket.on('personal memo', async (memo) => {
      const m = await SavePersonalMemo(name, memo, socket);

      const organizedMemo = {
        _id: m._id,
        name: m.name,
        msg: m.msg,
        createdAt: organizeCreatedAt(m.createdAt)
      }
      console.log('organizedMemo', organizedMemo);
      socket.emit('memoLogs', organizedMemo); // Ëá™ÂàÜ„Å†„Åë„Å´ÈÄÅ‰ø°
    });

    // < „Ç¢„É≥„Ç±„Éº„Éà„É°„ÉÉ„Çª„Éº„Ç∏ >
    socket.on('submitSurvey', async data => {
      const s = await SaveSurveyMessage(data, name);
      io.emit('survey_post', s);
    });

    // < „Ç¢„É≥„Ç±„Éº„ÉàÊäïÁ•® >
    socket.on('survey', async (msgId, option) => {
      const voteData = await processVoteEvent(msgId, option, socket.id, socket);
      io.emit('updateVote', voteData);
    });

    // < „Éú„Çø„É≥„Ç§„Éô„É≥„Éà (up, down, bookmark) >
    socket.on('event', async (eventType, msgId) => {
      await receiveSendButtonEvent(eventType, msgId, name, socket);
    });

    // ‰ºè„Åõ„Ç´„Éº„Éâ„Ç™„Éº„Éó„É≥
    socket.on('open_downCard', async (msg) => {
      console.log('open_downCard', msg);
      const p = await SaveChatMessage(name, msg.msg);

      const organizedPost = {
        _id: p._id,
        name: p.name,
        msg: p.msg,
        question: p.question,
        options: p.options,
        createdAt: msg.createdAt
      }

      io.emit('downCard', organizedPost);
    });
  });

  // < ÂàáÊñ≠ÊôÇ >
  socket.on('disconnect', async () => {
    disconnectFunction(socket);
  });
});

// „É≠„Ç∞„Ç§„É≥ÊôÇÔºàÂêçÂâç„Éª„Ç™„É≥„É©„Ç§„É≥„É¶„Éº„Ç∂„Éº„É™„Çπ„Éà„ÉªÈÅéÂéª„É≠„Ç∞Ôºâ
async function logInFunction(rawname, socket) {
  const name = rawname !== null && rawname !== '' ? rawname : ANONYMOUS_NAME;
  console.log(name + ' (' + socket.id + ') Êé•Á∂öÂÆå‰∫Üüí®');

  onlineUsers.push(name);
  idsOnlineUsers.push({ id: socket.id, name: name });
  io.emit('onlineUsers', onlineUsers);

  // „É©„É≥„ÉÄ„É†ÊñáÂ≠óÂàóÁîüÊàê
  const randomString = generateRandomString(10); // 10ÊñáÂ≠ó
  console.log('randomString: ', randomString);

  try { // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çí‰øùÂ≠ò 
    await saveUser(name, socket.id, randomString);
    console.log('„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±‰øùÂ≠ò„Åü„Å∂„ÇìÂÆå‰∫Ü');
  } catch (error) {
    handleErrors(error, 'LogInFunction „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±‰øùÂ≠ò‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
  }

  try { // ÈÅéÂéª„É≠„Ç∞„ÇíÂèñÂæó„ÉªÈÄÅ‰ø°
    const pastLogs = await getPastLogs();
    console.log('ÈÅéÂéª„É≠„Ç∞ÂèñÂæóÂÆå‰∫Ü', pastLogs);
    socket.emit('pastLogs', pastLogs);
  } catch (error) {
    handleErrors(error, 'LogInFunction ÈÅéÂéª„É≠„Ç∞ÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
  }
  return { name, randomString };
}

// ÂàáÊñ≠ÊôÇ„ÅÆ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„ÄÄÔºù„ÄÄ„Ç™„É≥„É©„Ç§„É≥„É°„É≥„Éê„Éº„Åã„ÇâÂâäÈô§
async function disconnectFunction(socket) {
  try {
    const targetName = idsOnlineUsers.find(obj => obj.id === socket.id)?.name;
    onlineUsers = onlineUsers.filter(val => val !== targetName);
    io.emit('onlineUsers', onlineUsers);
  } catch (error) {
    handleErrors(error, 'disconnectFunction ÂàáÊñ≠ÊôÇ');
  }
}

// „Çµ„Éº„Éê„Éº„ÅÆËµ∑Âãï
server.listen(PORT, () => {
  console.log('listening on *:' + PORT);
});
